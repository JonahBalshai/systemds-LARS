#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

/*
 * Layer-wise Adaptive Rate Scaling (LARS) optimizer.
 */

update = function(matrix[double] X, matrix[double] dX, double lr, double mu, 
                  matrix[double] v, double lambda, double trust_coeff)
    return (matrix[double] X, matrix[double] v) {
  /*
   * Performs a LARS update with layer-wise adaptive learning rate.
   *
   * Reference:
   * - Large Batch Training of Convolutional Networks
   *   https://arxiv.org/abs/1708.03888
   *
   * The LARS algorithm adapts the learning rate for each layer by 
   * computing a local learning rate based on the ratio between the
   * L2 norm of the weights and the L2 norm of the gradients.
   *
   * Inputs:
   *  - X: Parameters to update, of shape (any, any).
   *  - dX: Gradient of the loss function w.r.t. X, of same shape as X.
   *  - lr: Global learning rate.
   *  - mu: Momentum coefficient.
   *  - v: Velocity (momentum state), of same shape as X.
   *  - lambda: L2 regularization strength (weight decay).
   *  - trust_coeff: Trust coefficient for LARS (typically 0.001).
   *
   * Outputs:
   *  - X: Updated parameters X, of same shape as input X.
   *  - v: Updated velocity, of same shape as input v.
   */
  
  # Add weight decay to gradient
  dX_wd = dX + lambda * X
  
  # Compute L2 norms
  X_norm = sqrt(sum(X^2))
  dX_norm = sqrt(sum(dX_wd^2))
  
  # Compute local learning rate according to LARS paper
  # λ_l = η × ||w|| / (||∇L(w)|| + β||w||)
  # where η is trust_coeff, β is lambda (weight decay)
  epsilon = 1e-8
  local_lr = trust_coeff * X_norm / (dX_norm + lambda * X_norm + epsilon)
  
  # Apply global learning rate scaling
  # Note: In the paper, they use lr * local_lr, but also mention
  # that for bias terms, they often skip LARS and use regular SGD
  effective_lr = lr * local_lr
  
  # For very small layers (like biases), we might want to cap the local_lr
  # to avoid instability
  if (X_norm < 1e-3) {
    effective_lr = lr  # Use global lr for small parameters (like biases)
  }
  
  # SGD with momentum update using the adaptive learning rate
  v = mu * v - effective_lr * dX_wd
  X = X + v
}

init = function(matrix[double] X)
    return (matrix[double] v) {
  /*
   * Initialize the state for LARS (momentum).
   *
   * Inputs:
   *  - X: Parameters to update, of shape (any, any).
   *
   * Outputs:
   *  - v: Initial velocity (zeros), of same shape as X.
   */
  v = matrix(0, rows=nrow(X), cols=ncol(X))
}

get_lr_with_warmup = function(double base_lr, int epoch, int iter, int total_epochs,
                              int iters_per_epoch, int batch_size, int base_batch_size,
                              int warmup_epochs, int decay_power)
    return (double lr) {
    /*
     * Compute learning rate with linear warmup and polynomial decay.
     * 
     * Implements the learning rate schedule from LARS paper:
     * - Linear warmup for first warmup_epochs
     * - Polynomial decay afterwards
     * - Linear scaling with batch size
     */
    
    # Scale learning rate linearly with batch size
    scaled_lr = base_lr * batch_size / base_batch_size
    
    # Total number of iterations
    total_iters = total_epochs * iters_per_epoch
    warmup_iters = warmup_epochs * iters_per_epoch
    current_iter = (epoch - 1) * iters_per_epoch + iter
    
    if (current_iter <= warmup_iters) {
        # Linear warmup
        lr = scaled_lr * current_iter / warmup_iters
    } else {
        # Polynomial decay
        decay_iters = total_iters - warmup_iters
        decay_current = current_iter - warmup_iters
        decay_factor = (1 - decay_current / decay_iters) ^ decay_power
        lr = scaled_lr * decay_factor
    }
}