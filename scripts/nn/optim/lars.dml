#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

/*
 * Layer-wise Adaptive Rate Scaling (LARS) optimizer.
 */

update = function(matrix[double] X, matrix[double] dX, double lr, double mu, 
                  matrix[double] v, double lambda, double trust_coeff)
    return (matrix[double] X_upd, matrix[double] v_upd) {
  /*
   * Performs a LARS update with decoupled weight decay.
   *
   * This corrected version fixes two key issues:
   * 1. It correctly calculates the LARS denominator as the norm of the sum,
   *    not the sum of the norms.
   * 2. It uses decoupled weight decay, which is more stable with adaptive
   *    learning rates.
   *
   * Inputs:
   *  - X: Parameters to update.
   *  - dX: Gradient of the loss function w.r.t. X.
   *  - lr: Global learning rate.
   *  - mu: Momentum coefficient.
   *  - v: Velocity (momentum state).
   *  - lambda: L2 regularization strength (weight decay).
   *  - trust_coeff: Trust coefficient for LARS (typically 0.001).
   *
   * Outputs:
   *  - X_upd: Updated parameters.
   *  - v_upd: Updated velocity.
   */
  
  # L2 norm of the parameters (weights)
  X_norm = sqrt(sum(X^2));
  
  # Gradient with weight decay. This is ONLY used to calculate the LARS ratio.
  # The pure dX will be used for the momentum update.
  grad_with_decay = dX + lambda * X;
  grad_with_decay_norm = sqrt(sum(grad_with_decay^2));
  
  # Epsilon for numerical stability
  epsilon = 1e-8;
  
  # Compute local learning rate according to the LARS paper
  # This is the CORRECT way to calculate the denominator.
  local_lr = trust_coeff * X_norm / (grad_with_decay_norm + epsilon);
  
  # Scale by the global learning rate
  effective_lr = lr * local_lr;
  
  # For very small layers (like biases), skip LARS and use the global learning rate.
  # This is a common practice for stability.
  # Note: ncol(X)==1 is a good heuristic for identifying bias vectors.
  if (X_norm < 1e-5 | ncol(X) == 1) {
    effective_lr = lr;
  }
  
  # Momentum update using the PURE gradient (dX)
  v_upd = mu * v + effective_lr * dX;
  
  # Decoupled weight decay: Update parameters using the momentum buffer
  # AND subtracting the weight decay term separately.
  X_upd = X - v_upd - lr * lambda * X;
}

init = function(matrix[double] X)
    return (matrix[double] v) {
  /*
   * Initialize the state for LARS (momentum).
   *
   * Inputs:
   *  - X: Parameters to update, of shape (any, any).
   *
   * Outputs:
   *  - v: Initial velocity (zeros), of same shape as X.
   */
  v = matrix(0, rows=nrow(X), cols=ncol(X))
}