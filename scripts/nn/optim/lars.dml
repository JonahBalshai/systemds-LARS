#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

/*
 * Layer-wise Adaptive Rate Scaling (LARS) optimizer.
 */

update = function(matrix[double] X, 
                  matrix[double] dX, 
                  double lr, 
                  double mu, 
                  matrix[double] v, 
                  double lambda, 
                  double trust_coeff,
                  boolean skip_lars = FALSE)
    return (matrix[double] X, matrix[double] v) 
    
{
  /*
   * Performs a LARS update with layer-wise adaptive learning rate.
   *
   * Reference:
   * - Large Batch Training of Convolutional Networks
   *   https://arxiv.org/abs/1708.03888
   *
   * The LARS algorithm adapts the learning rate for each layer by 
   * computing a local learning rate based on the ratio between the
   * L2 norm of the weights and the L2 norm of the gradients.
   *
   * Inputs:
   *  - X: Parameters to update, of shape (any, any)
   *  - dX: Gradient of the loss function w.r.t. X, of same shape as X
   *  - lr: Global learning rate
   *  - mu: Momentum coefficient
   *  - v: Velocity (momentum state), of same shape as X
   *  - lambda: L2 regularization strength (weight decay)
   *  - trust_coeff (η): Trust coefficient for LARS (typically 0.001)
   *  - 
   *
   * Outputs:
   *  - X: Updated parameters X, of same shape as input X.
   *  - v: Updated velocity, of same shape as input v.
   */
 
  # Detect very small tensors (bias / BN) if caller did not flag them | Paper's recommendation for bias terms
  if (!skip_lars) {
    skip_lars = (nrow(X)==1 | ncol(X)==1 | sqrt(sum(X^2)) < 1e-3)
  }

  #-----------------------------------------------------------
  # 1.  Build gradient w/ weight-decay  (needed either way)
  #-----------------------------------------------------------
  if (skip_lars) {
    dX_wd = dX                  # no decay for bias / BN
  } else {
    dX_wd = dX + lambda * X     # standard weight-decay
  }

  #-----------------------------------------------------------
  # 2.  Compute local LR  λ_l   (only if LARS is enabled)
  #-----------------------------------------------------------
  effective_lr = lr        # default: plain SGD
  if (!skip_lars) {
    
    # Compute L2 norms
    X_norm   = sqrt(sum(X ^ 2))
    dX_norm  = sqrt(sum(dX_wd ^ 2))         # <-- includes decay
    eps      = 1e-8

    local_lr = trust_coeff * X_norm / (dX_norm + eps)

    # optional safety-clamp (helps early-epoch stability)
    if (local_lr > 1.0)  local_lr = 1.0

    effective_lr = lr * local_lr
  }

  #-----------------------------------------------------------
  # 3.  SGD-with-momentum update
  #-----------------------------------------------------------
  v = mu * v - effective_lr * dX_wd
  X = X + v
}

init = function(matrix[double] X)
    return (matrix[double] v) {
  /*
   * Initialize the state for LARS (momentum).
   *
   * Inputs:
   *  - X: Parameters to update, of shape (any, any).
   *
   * Outputs:
   *  - v: Initial velocity (zeros), of same shape as X.
   */
  v = matrix(0, rows=nrow(X), cols=ncol(X))
}