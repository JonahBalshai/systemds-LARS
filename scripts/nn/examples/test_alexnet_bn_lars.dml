#-------------------------------------------------------------
# Test script for AlexNet-BN LARS example
# This runs a minimal version for testing purposes
#-------------------------------------------------------------

source("nn/examples/Example-AlexNet_BN_LARS.dml") as alexnet_lars

# Override the data loading function to use smaller data for testing
load_imagenet_data = function(int Hin, int Win)
    return (matrix[double] X_train, matrix[double] Y_train,
            matrix[double] X_val, matrix[double] Y_val) {
  /*
   * Create small test data
   */
  print("Creating small test dataset...")
  
  N_train = 100  # Very small for testing
  N_val = 20
  D = 3 * Hin * Win
  num_classes = 10  # Fewer classes for testing
  
  # Generate dummy data
  X_train = rand(rows=N_train, cols=D, min=0, max=1, seed=42)
  Y_train = table(seq(1, N_train), sample(num_classes, N_train, TRUE, 42), N_train, num_classes)
  
  X_val = rand(rows=N_val, cols=D, min=0, max=1, seed=43)
  Y_val = table(seq(1, N_val), sample(num_classes, N_val, TRUE, 43), N_val, num_classes)
}

# Test with small batch size and few epochs
print("Testing AlexNet-BN LARS implementation...")
print("Running with small dataset and 2 epochs for verification")
print("")

# Test with batch size 32, 2 epochs
batch_size = 32
epochs = 2
base_lr = 0.02

# Run the training
[model, metrics] = alexnet_lars::train_alexnet_bn_lars(batch_size, epochs, base_lr)

print("")
print("Test completed successfully!")
print("Final metrics:")
print("Train Loss: " + metrics[epochs, 1])
print("Train Acc: " + metrics[epochs, 2])
print("Val Loss: " + metrics[epochs, 3])
print("Val Acc: " + metrics[epochs, 4])