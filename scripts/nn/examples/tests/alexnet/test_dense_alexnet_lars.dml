#-------------------------------------------------------------
#
# Test script for AlexNet-BN LARS with dense matrix operations
#
#-------------------------------------------------------------

# Import the fixed AlexNet implementation
source("nn/networks/alexnet_LARS.dml") as alexnet
source("nn/optim/lars_util.dml") as lars_util

# Test dense data loading
test_dense_data = function() {
  print("Testing dense data loading...")
  
  # Test parameters
  Hin = 224
  Win = 224
  num_classes = 10
  
  # Create small dense test data
  N = 10
  D = 3 * Hin * Win
  
  # Generate dense data - rand() already returns a dense matrix
  X = rand(rows=N, cols=D, min=0.0, max=1.0, pdf="uniform", seed=42)
  
  # Create labels and one-hot encoding
  labels = sample(num_classes, N, TRUE, 42)
  Y = table(seq(1, N), labels, N, num_classes)
  
  # Check density
  print("X density: " + (sum(X != 0) / (nrow(X) * ncol(X))))
  print("Y density: " + (sum(Y != 0) / (nrow(Y) * ncol(Y))))
  
  # Initialize model
  [model, emas] = alexnet::init_with_bn(3, Hin, Win, num_classes, 42)
  
  # Test forward pass
  print("Testing forward pass...")
  [predictions, cached_out, emas_upd] = alexnet::forward_with_bn(
      X, 3, Hin, Win, model, "train", 0.5)
  
  print("Forward pass successful!")
  print("Predictions shape: " + nrow(predictions) + "x" + ncol(predictions))
  
  # Test backward pass
  print("Testing backward pass...")
  dOut = rand(rows=N, cols=num_classes, min=-1, max=1, seed=43)
  
  [dX, gradients] = alexnet::backward_with_bn(dOut, cached_out, model, 3, Hin, Win, 0.5)
  
  print("Backward pass successful!")
  print("dX shape: " + nrow(dX) + "x" + ncol(dX))
  print("Number of gradients: " + length(gradients))
  
  # Test LARS update
  print("Testing LARS update...")
  optim_state = alexnet::init_lars_optim_params(model)
  [model_upd, optim_state_upd] = alexnet::update_params_with_lars(
      model, gradients, 0.01, 0.9, 0.0005, 0.001, optim_state)
  
  print("LARS update successful!")
  print("")
  print("âœ… All dense matrix tests passed!")
}

# Run the test
test_dense_data()

print("")
print("Test completed successfully! The implementation handles dense matrices correctly.") 