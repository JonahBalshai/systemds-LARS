# Minimal test to isolate the Conv2 dimension issue
# This replicates exactly what happens in forward_with_bn at line 277

source("scripts/nn/networks/alexnet_LARS.dml") as alexnet
source("scripts/nn/layers/conv2d_builtin.dml") as conv2d
source("scripts/nn/layers/conv2d_grouped.dml") as conv2d_grouped
source("scripts/nn/layers/batch_norm2d.dml") as batch_norm2d
source("scripts/nn/layers/relu.dml") as relu
source("scripts/nn/layers/max_pool2d_builtin.dml") as max_pool2d

print("=== Minimal Conv2 Dimension Test ===")
print("Replicating forward_with_bn line 277 exactly")
print("")

# Use same parameters as AlexNet
C = 3
Hin = 224
Win = 224
num_classes = 10
batch_size = 2  # Small batch for testing
seed = 42

# Initialize model
print("Initializing model...")
[model, emas] = alexnet::init_with_bn(C, Hin, Win, num_classes, seed)

# Extract the exact parameters used in forward_with_bn
W1 = as.matrix(model[1]); b1 = as.matrix(model[2])
gamma1 = as.matrix(model[3]); beta1 = as.matrix(model[4])
ema_mean1 = as.matrix(model[5]); ema_var1 = as.matrix(model[6])

W2 = as.matrix(model[7]); b2 = as.matrix(model[8])
gamma2 = as.matrix(model[9]); beta2 = as.matrix(model[10])
ema_mean2 = as.matrix(model[11]); ema_var2 = as.matrix(model[12])

print("Key parameters:")
print("W1: " + nrow(W1) + " x " + ncol(W1))
print("W2: " + nrow(W2) + " x " + ncol(W2))
print("")

# Create input exactly as in the example
X = rand(rows=batch_size, cols=C*Hin*Win, min=-1, max=1, seed=42) + 0
print("Input X: " + nrow(X) + " x " + ncol(X))
print("")

# Replicate the exact sequence from forward_with_bn
print("=== Replicating forward_with_bn sequence ===")

# Lines 271-274: Conv1 → BN → ReLU → MaxPool
print("Lines 271-274: Conv1 → BN → ReLU → MaxPool")
[outc1, Houtc1, Woutc1] = conv2d::forward(X, W1, b1, C, Hin, Win, 11, 11, 4, 4, 0, 0)
print("  outc1: " + nrow(outc1) + " x " + ncol(outc1))

[outbn1, ema_mean1_upd, ema_var1_upd, cache_mean1, cache_inv_var1] = batch_norm2d::forward(outc1, gamma1, beta1, 96, Houtc1, Woutc1, "train", ema_mean1, ema_var1, 0.99, 1e-5)
print("  outbn1: " + nrow(outbn1) + " x " + ncol(outbn1))

outr1 = relu::forward(outbn1)
print("  outr1: " + nrow(outr1) + " x " + ncol(outr1))

[outp1, Houtp1, Woutp1] = max_pool2d::forward(outr1, 96, Houtc1, Woutc1, 3, 3, 2, 2, 0, 0)
print("  outp1: " + nrow(outp1) + " x " + ncol(outp1) + " (spatial: " + Houtp1 + "x" + Woutp1 + ")")
print("")

# Line 277: THE CRITICAL LINE
print("Line 277: Conv2 grouped convolution (THE CRITICAL LINE)")
print("Calling: conv2d_grouped::forward(outp1, W2, b2, 96, Houtp1, Woutp1, 5, 5, 1, 1, 2, 2, 2)")

print("Parameters going into conv2d_grouped::forward:")
print("  outp1: " + nrow(outp1) + " x " + ncol(outp1))
print("  W2: " + nrow(W2) + " x " + ncol(W2))
print("  b2: " + nrow(b2) + " x " + ncol(b2))
print("  C=96, H=" + Houtp1 + ", W=" + Woutp1)
print("  Hf=5, Wf=5, strideh=1, stridew=1, padh=2, padw=2, groups=2")
print("")

# Check the expected dimensions
expected_C_per_group = 96 / 2
expected_W2_cols = expected_C_per_group * 5 * 5
print("Expected dimensions check:")
print("  C_per_group = " + expected_C_per_group)
print("  Expected W2 cols = " + expected_C_per_group + " * 5 * 5 = " + expected_W2_cols)
print("  Actual W2 cols = " + ncol(W2))
print("  Match? " + (expected_W2_cols == ncol(W2)))
print("")

# Now run the actual line 277
print("Executing line 277...")
[outc2, Houtc2, Woutc2] = conv2d_grouped::forward(outp1, W2, b2, 96, Houtp1, Woutp1, 5, 5, 1, 1, 2, 2, 2)

print("SUCCESS! Conv2 completed:")
print("  outc2: " + nrow(outc2) + " x " + ncol(outc2) + " (spatial: " + Houtc2 + "x" + Woutc2 + ")")
print("")

# Continue with line 278: BN2
print("Line 278: BN2")
print("Calling: batch_norm2d::forward(outc2, gamma2, beta2, 256, Houtc2, Woutc2, ...)")
print("  gamma2: " + nrow(gamma2) + " x " + ncol(gamma2))
print("  beta2: " + nrow(beta2) + " x " + ncol(beta2))

[outbn2, ema_mean2_upd, ema_var2_upd, cache_mean2, cache_inv_var2] = batch_norm2d::forward(outc2, gamma2, beta2, 256, Houtc2, Woutc2, "train", ema_mean2, ema_var2, 0.99, 1e-5)
print("  outbn2: " + nrow(outbn2) + " x " + ncol(outbn2))

print("")
print("=== SUCCESS: All critical operations completed ===")
print("No dimension errors encountered in this minimal test.")